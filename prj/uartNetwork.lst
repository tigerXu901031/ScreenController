C51 COMPILER V9.00   UARTNETWORK                                                           06/12/2019 17:22:59 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE UARTNETWORK
OBJECT MODULE PLACED IN ..\bin\uartNetwork.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C51\BIN\C51.EXE ..\src\srv\uartNetwork.c BROWSE DEBUG OBJECTEXTEND PRINT(.\ua
                    -rtNetwork.lst) OBJECT(..\bin\uartNetwork.obj)

line level    source

   1          /* 
   2             -----------------------------------------------------------------------
   3             Author   - Tiger.Xu
   4             Date     - 2019.06.08
   5             Version  - 0.0.1
   6          
   7             Change Notes:
   8                  2019.06.08      Tiger.Xu
   9                  Initial version
  10          
  11                  ...             ...
  12                  ...
  13              
  14             Description:
  15                  - 2 Channel UART 485 communication network protocol
  16                  - Channel 1: PC <-> LCD
  17                  - Channel 2: LCD <-> Main Controller
  18             
  19                  - Broadcast Id(PC <-> LCD Controller)ï¼š 0x00
  20                  - Private Id(LCD Controller <-> Main Controller) is 0xff 
  21             -----------------------------------------------------------------------
  22          */
  23          #include "uartNetwork.h"
*** ERROR C141 IN LINE 24 OF ..\SRC\SRV\../DRV/UARTDRV.H: syntax error near ','
*** ERROR C141 IN LINE 25 OF ..\SRC\SRV\../DRV/UARTDRV.H: syntax error near ','
*** ERROR C141 IN LINE 20 OF ..\SRC\SRV\UARTNETWORK.H: syntax error near '['
*** ERROR C141 IN LINE 20 OF ..\SRC\SRV\UARTNETWORK.H: syntax error near '['
*** ERROR C141 IN LINE 22 OF ..\SRC\SRV\UARTNETWORK.H: syntax error near '}'
*** ERROR C141 IN LINE 25 OF ..\SRC\SRV\UARTNETWORK.H: syntax error near 'msg_type'
*** ERROR C129 IN LINE 25 OF ..\SRC\SRV\UARTNETWORK.H: missing ';' before 'msg'
  24          
  25          static void nodeIdConstruct(msg_type *msgObj, unsigned int newData, unsigned int *dataByteCnt)
  26          {
  27              msgObj->nodeId = newData;
  28              *dataByteCnt ++;
  29          }
  30          
  31          static void cmdConstruct(msg_type *msgObj, unsigned int newData, unsigned int *dataByteCnt)
  32          {
  33              msgObj->cmd = newData;
  34              *dataByteCnt ++;
  35          }
  36          
  37          static void readOpMsgConstruct(msg_type *msgObj, unsigned int newData, unsigned int *dataByteCnt)
  38          {
  39              /*  */
  40          }
  41          
  42          static void readFailMsgConstruct(msg_type *msgObj, unsigned int newData,unsigned int *dataByteCnt)
  43          {
  44              
  45          }
  46          
  47          static void writeOpMsgConstruct(msg_type *msgObj, unsigned int newData,unsigned int *dataByteCnt)
C51 COMPILER V9.00   UARTNETWORK                                                           06/12/2019 17:22:59 PAGE 2   

  48          {
  49              
  50          }
  51          
  52          static void writeFailMsgConstruct(msg_type *msgObj, unsigned int newData,unsigned int *dataByteCnt)
  53          {
  54              
  55          }
  56          
  57          static void dataMonitorMsgConstruct(msg_type *msgObj, unsigned int newData,unsigned int *dataByteCnt)
  58          {
  59              
  60          }
  61          
  62          static void heartBeatMsgConstruct(msg_type *msgObj, unsigned int newData,unsigned int *dataByteCnt)
  63          {
  64              
  65          }
  66          
  67          static void networkGateway()
  68          {
  69              
  70          }
  71          
  72          void networkInit()
  73          {
  74              uartInit();
  75          
  76              /* TODO:
  77                 Fetch the public node ID from the door controller 
  78                 if the fetch operation is failed then the initialization
  79                 will fail 
  80                 Fetch Node ID procedure:
  81                 1. Send an read (public ID) request to the main controller
  82                 2. 
  83              */
  84              
  85          }
  86          
  87          void networkUpdate()
  88          {
  89              networkGateway();
  90          }
  91          
  92          void setTxMsgAndDisassemble()
  93          {
  94              
  95          }
  96          
  97          void getRxMsgAndAssemble()
  98          {
  99              static unsigned int dataByteCnt = 0;
 100              static unsigned int newDatBuf = 0;
 101              static msgBuf_type msgBuf;
 102          
 103              networkChannel_type i = 0;
 104              for(i = 0; i < max_networkChannel; i ++)
 105              {
 106                  /* if new data from uart is available */
 107                  if(isUartNewDataAvailable(i))
 108                  {
 109                      getUartReceiveBuf(&newDatBuf, i);
C51 COMPILER V9.00   UARTNETWORK                                                           06/12/2019 17:22:59 PAGE 3   

 110          
 111                      if(dataByteCnt == 0)
 112                      {
 113                          /* node index byte */
 114                          nodeIdConstruct(&msgBuf.msg, newDatBuf, &dataByteCnt);
 115                      }
 116                      else if(dataByteCnt == 1)
 117                      {
 118                          /* command byte */
 119                          cmdConstruct(&msgBuf.msg, newDatBuf, &dataByteCnt);
 120                          }
 121                          else
 122                      {
 123                          /* consecutive byte */
 124                          switch(msgBuf.msg.cmd)
 125                          {
 126                              case msgClass_readOp:
 127                                  readOpMsgConstruct(&msgBuf.msg, newDatBuf, &dataByteCnt);
 128                              break;
 129          
 130                              case msgClass_readFail:
 131                                  readFailMsgConstruct(&msgBuf.msg, newDatBuf, &dataByteCnt);
 132                              break;
 133          
 134                              case msgClass_writeOp:
 135                                  writeOpMsgConstruct(&msgBuf.msg, newDatBuf, &dataByteCnt);
 136                              break;
 137          
 138                              case msgClass_writeFail:
 139                                  writeFailMsgConstruct(&msgBuf.msg, newDatBuf, &dataByteCnt);
 140                              break;
 141          
 142                              case msgClass_dataMonitor:
 143                                  dataMonitorMsgConstruct(&msgBuf.msg, newDatBuf, &dataByteCnt);
 144                              break;
 145          
 146                              case msgClass_heartBeat:
 147                                  dataMonitorMsgConstruct(&msgBuf.msg, newDatBuf, &dataByteCnt);
 148                              break;
 149          
 150                              default:
 151                                  /* Might need report error due to no message class
 152                                     is match */
 153                              break;
 154                          }
 155                      }
 156                  }
 157                  else
 158                  {
 159                      /* No new data do nothing */
 160                  }
 161              }
 162          
 163          }
 164          
 165          void crc16()
 166          {
 167          
 168          }

C51 COMPILATION COMPLETE.  0 WARNING(S),  7 ERROR(S)
