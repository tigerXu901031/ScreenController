C51 COMPILER V9.00   UARTDRV                                                               07/11/2019 00:50:50 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE UARTDRV
OBJECT MODULE PLACED IN ..\bin\uartDrv.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE ..\src\drv\uartDrv.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(..\lst\uartDrv.l
                    -st) OBJECT(..\bin\uartDrv.obj)

line level    source

   1          /* 
   2             -----------------------------------------------------------------------
   3             Author   - Tiger.Xu
   4             Date     - 2019.06.08
   5             Version  - 0.0.1
   6          
   7             Change Notes:
   8                  2019.06.08      Tiger.Xu
   9                  Initial version
  10          
  11                  ...             ...
  12                  ...
  13              
  14             Description:
  15                  - Use one level fifo buffer when receive and transmit data in byte
  16                    level
  17                  - Baud rate: 9600bps
  18                  - one start bit, one stop bit, 8 data bit
  19                  
  20             -----------------------------------------------------------------------
  21          */
  22          
  23          #include "uartDrv.h"
  24          
  25          uartSts_type uartGlobalSts[busIdx_max];
  26          fifo_type uartTxFifo_Obj[busIdx_max];
  27          fifo_type uartRxFifo_Obj[busIdx_max];
  28          
  29          // void switch485Mode(busIdx_type busId, busMode_type busMode)
  30          // {
  31          //     if(busId == busIdx_private)
  32          //     {
  33          //         if(busMode == busMode_tx)
  34          //         {
  35                      
  36          //         }
  37          //     }
  38          //     else if(busId == busIdx_public)
  39          //     {
  40                  
  41          //     }
  42          // }
  43          
  44          /* This function should be called cyclic in TODO: 1 ms
  45             (Not final decided yet) and will be called in a timer
  46             interrupt
  47           */
  48          static void sendDataCyclic()
  49          {
  50   1          unsigned char uartData;
  51   1          busIdx_type i = 0;
  52   1      
  53   1          /* test only */
  54   1          // S4BUF = 0xaa;
C51 COMPILER V9.00   UARTDRV                                                               07/11/2019 00:50:50 PAGE 2   

  55   1          // S3BUF = 0xaa;
  56   1          for(i = 0; i < busIdx_max; i ++)
  57   1          {
  58   2      
  59   2              if(uartTxFifo_Obj[i].curPtr > 0)
  60   2              {
  61   3      
  62   3                  /* If the Tx FIFO buffer has data to send then put
  63   3                     the send data into data register
  64   3                   */
  65   3                  if(uartGlobalSts != uartSts_busy)
  66   3                  {
  67   4                      getFifoData(&uartTxFifo_Obj[i], &uartData);
  68   4                      if(i == busIdx_public)
  69   4                      {
  70   5                          uartGlobalSts[busIdx_public] = uartSts_busy;
  71   5                          P53 = 1;
  72   5                          S4BUF = uartData;
  73   5                      }
  74   4                      else if(i == busIdx_private)
  75   4                      {
  76   5                          uartGlobalSts[busIdx_private] = uartSts_busy;
  77   5                          P52 = 1;
  78   5                          S3BUF = uartData;
  79   5                      }
  80   4                      else{
  81   5                          /* unknown error */
  82   5                      }
  83   4                  }
  84   3                  else{
  85   4                      /* do nothing */
  86   4                  }
  87   3              }
  88   2          }
  89   1      }
  90          
  91          void uartDrvInit()
  92          {
  93   1          unsigned char i;
  94   1      
  95   1              /* Debug uart channel */
  96   1              SCON    =   0x50;       /* 8bit data, baudrate adjustable */
  97   1              AUXR    |=  0x40;   /* Fosc cloco frequency for timer1 -> 1T */
  98   1              AUXR    &=  0xFE;       /* uart1 choose timer1 as the baud rate generator */
  99   1              TMOD    &=  0x0F;       /* set the timer 1 as the 16 bit auto reload operation mode */
 100   1              TL1             =   0x8F;       /* set the timer initial value */
 101   1              TH1             =   0xFD;       /* set the timer initial value */
 102   1              ET1             =   0;          /* inhibit timer 1 interrupt */
 103   1              TR1             =   1;          /* start timer 1 */
 104   1              ES              =   1;      /* enable uart interrupt */
 105   1              
 106   1              /* UART 3 Baud Rate:9600, using Timer3 */
 107   1              S3CON   =       0x10;   /* 8 bit data, baudrate adjustable */
 108   1              S3CON   |=      0x40;   /* uart3 use timer 3 as the baudrate generator */
 109   1              T4T3M   &=      0xFD;   /* set the clock frequency as Fosc / 12 -> 12T */
 110   1              T3L     =       0xCC;   /* set the initial value */
 111   1              T3H     =       0xFF;   /* set the initial value */
 112   1              T4T3M   |=      0x08;   /* start timer 3 */
 113   1          IE2     |=  0x08;   /* enable uart 3 interrupt */
 114   1              
 115   1              /* UART 4       Baud Rate:9600, using Timer2 */
 116   1              S4CON   =       0x10;   /* 8 bit data, baud rate adjustable */
C51 COMPILER V9.00   UARTDRV                                                               07/11/2019 00:50:50 PAGE 3   

 117   1              S4CON   &=      0xBF;   /* uart 4 use timer 2 as the baudrate generator */
 118   1              AUXR    &=      0xFB;   /* set the clock frequency for timer 2 as Fosc /12 -> 12T  */
 119   1              T2L     =       0xCC;   /* set the initial value */
 120   1              T2H     =       0xFF;   /* set the initial value */
 121   1              AUXR    |=      0x10;   /* start timer 2 */
 122   1          IE2     |=  0x10;   /* enable uart 4 interrupt */
 123   1      
 124   1                      
 125   1              EA              = 1;        /* start the gloabl interrupt */
 126   1      
 127   1          /* Create an FIFO object buffer uart data */
 128   1          for(i = 0; i < busIdx_max; i ++)
 129   1          {
 130   2              uartTxFifo_Obj[i] = fifoInit(UART_DATA_LEN_IN_BYTE);
 131   2              uartRxFifo_Obj[i] = fifoInit(UART_DATA_LEN_IN_BYTE);
 132   2          }
 133   1      }
 134          
 135          void uartDrvUpdate()
 136          {
 137   1          sendDataCyclic();
 138   1      }
 139          
 140          uartSts_type setUartSendBuf(unsigned char *uartData, busIdx_type busId)
 141          {
 142   1          fifoSts_type writeOpsts;
 143   1          uartSts_type returnVal;
 144   1      
 145   1      
 146   1          /* write the data into the send buffer */
 147   1          writeOpsts = setFifoData(&uartTxFifo_Obj[busId], uartData);
 148   1          if(writeOpsts == writeSuccess)
 149   1          {
 150   2              returnVal = uartSts_normal;
 151   2          }
 152   1          else{
 153   2              returnVal = uartSts_sendFail; 
 154   2          }
 155   1          return returnVal;
 156   1      }
 157          
 158          uartSts_type getUartReceiveBuf(unsigned char *uartData, busIdx_type busId)
 159          {
 160   1          fifoSts_type readOpsts;
 161   1          uartSts_type returnVal;
 162   1      
 163   1          /* Get the data from Rx fifo */
 164   1          readOpsts = getFifoData(&uartRxFifo_Obj[busId], uartData);
 165   1      
 166   1          if(readOpsts == readSuccess)
 167   1          {
 168   2              returnVal = uartSts_normal;
 169   2          }
 170   1          else{
 171   2              returnVal = uartSts_receiveFail;
 172   2          }
 173   1          return returnVal;
 174   1      }
 175          
 176          /* uart 3(private network connect with door controller) interrupt service function */ 
 177          void uart3Int()
 178          {
C51 COMPILER V9.00   UARTDRV                                                               07/11/2019 00:50:50 PAGE 4   

 179   1          /* TODO this interrupt shoud be copy for two channel */
 180   1          unsigned char uartData;
 181   1          
 182   1          if (S3CON & S3RI)
 183   1          {
 184   2              // P44 = 1;
 185   2      
 186   2              uartData = S3BUF;
 187   2      
 188   2              setFifoData(&uartRxFifo_Obj[busIdx_private], &uartData);
 189   2      
 190   2              S3CON &= ~S3RI;
 191   2      
 192   2              // P44 = 0;     
 193   2          }
 194   1          if (S3CON & S3TI)
 195   1          {
 196   2              S3CON &= ~S3TI;
 197   2              uartGlobalSts[busIdx_private] = uartSts_normal;
 198   2              P52 = 0;         
 199   2          }
 200   1      
 201   1          
 202   1      }
 203          
 204          /* uart 4(public network connect with PC) interrupt service function */
 205          void uart4Int()
 206          {
 207   1          unsigned char uartData;
 208   1          if (S4CON&S4RI)
 209   1          {
 210   2              S4CON &= ~S4RI;
 211   2      
 212   2              uartData = S4BUF;
 213   2              /* Put the data into the Rx FIFO */                 
 214   2                      setFifoData(&uartRxFifo_Obj[busIdx_public], &uartData);
 215   2          }
 216   1          if (S4CON&S4TI)
 217   1          {
 218   2              S4CON &= ~S4TI;
 219   2              uartGlobalSts[busIdx_public] = uartSts_normal;
 220   2              P53 = 0;         
 221   2          }
 222   1      
 223   1      }
 224          
 225          unsigned char isUartNewDataAvailable(busIdx_type nwChn)
 226          {
 227   1          if(uartRxFifo_Obj[nwChn].curPtr > 0)
 228   1          {
 229   2              return 1;
 230   2          }
 231   1          else
 232   1          {
 233   2              return 0;
 234   2          }
 235   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    587    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.00   UARTDRV                                                               07/11/2019 00:50:50 PAGE 5   

   XDATA SIZE       =    410      13
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
