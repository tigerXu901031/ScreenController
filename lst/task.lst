C51 COMPILER V9.00   TASK                                                                  07/03/2019 08:06:54 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE TASK
OBJECT MODULE PLACED IN ..\bin\task.obj
COMPILER INVOKED BY: C:\Program Files\Keil4\C51\BIN\C51.EXE ..\src\main\task.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(..\
                    -lst\task.lst) OBJECT(..\bin\task.obj)

line level    source

   1          #include "task.h"
   2          
   3          SystemStatusType SysStatus;
   4          
   5          void taskInit()
   6          {
   7   1          IO_INIT();
   8   1          delay_ms(200);
   9   1          INIT_LCD();
  10   1          clear_screen();
  11   1              SysStatusInit(SysStatus);
  12   1      
  13   1          /* need to consider to use cyclic task or not */
  14   1      
  15   1          P52 = 0;            //RS485_DR_1
  16   1          P53 = 0;            //RS485_DR_2
  17   1          networkInit();
  18   1          timerInit();
  19   1          timer25ms_Enable();
  20   1          timer2ms_Enable();
  21   1      }
  22          
  23          /* test purpose only */
  24          const unsigned char testReadReqMsg[6] = {0x01, 0x03, 0xF1, 0x02, 0x11, 0x22};
  25          const unsigned char testReadRepMsg[8] = {0xFF, 0x03, 0xF2, 0x02, 0xAA, 0x55, 0x23, 0x33};
  26          const unsigned char testReadLongRepMsg[39] = {0xFF, 0x03, 0x30, 0x00, 0x04, 0x01, 0x02, 0x03, 0x04, 0x05, 
             -0x06,
  27                                                        0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 
             -0x17,
  28                                                        0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 
             -0x28,
  29                                                        0x29, 0x30, 0x31, 0x32, 0xcc, 0xcc};
  30          const unsigned char testWriteRepMsg[8] = {0x01, 0x06, 0xF0, 0x99, 0x32, 0x55, 0x55, 0xAA};
  31          const unsigned char testReadFailMsg[8] = {0xFF, 0x83, 0xF0, 0x99, 0x88, 0x55, 0x55, 0xAA};
  32          void task2ms()
  33          {
  34   1      
  35   1          // static unsigned char testCnt = 0;
  36   1          /* test purpose only
  37   1             to simulate an test message that set in the FIFO buffer cyclic */
  38   1          // if(testCnt < sizeof(testReadFailMsg))
  39   1          // {
  40   1          //     setFifoData(&uartRxFifo_Obj[busIdx_private], &testReadFailMsg[testCnt]);
  41   1          //     testCnt ++;
  42   1          // }
  43   1          // else
  44   1          // {
  45   1          //     testCnt = 0;
  46   1          // }
  47   1      
  48   1          /* 1ms send out data via uart seems very critial for 8bit send,
  49   1             maybe need to increase to 2ms later
  50   1             TODO: now its 2ms ---  */
  51   1          network2msUpdate();
C51 COMPILER V9.00   TASK                                                                  07/03/2019 08:06:54 PAGE 2   

  52   1      
  53   1      }
  54          
  55          /* test purpose only */
  56          unsigned char testSendByte[2] = {0x55, 0xaa};
  57          unsigned char testRecByte[2] = {0, 0};
  58          
  59          InterfaceData_type testPar[20];
  60          
  61          void task25ms()
  62          {
  63   1          unsigned char dummyCnt;
  64   1          unsigned char dummyCmd = 0x06;
  65   1          unsigned char dummyDatL = 0x02;
  66   1          unsigned char dummyDatH = 0;
  67   1      
  68   1          static unsigned char taskCnt = 0;
  69   1          /* test purpose only */
  70   1      
  71   1          // static unsigned char iCounter = 0;
  72   1      
  73   1          // unsigned char i = 0;
  74   1          // unsigned char tempData = 0;
  75   1          // /* test code --- echo whatever it recieved at the same bus */
  76   1          // for(i = 0; i < uartRxFifo_Obj[1].curPtr; i ++)
  77   1          // {
  78   1          //     getFifoData(&uartRxFifo_Obj[1], &tempData);
  79   1          //     setFifoData(&uartTxFifo_Obj[1], &tempData);
  80   1          // }
  81   1      
  82   1          // if(iCounter == 10)
  83   1          // {
  84   1          //     testSetNwData.dataLength =1;
  85   1          //     testSetNwData.networkData[0].cmd = 0x03;
  86   1          //     testSetNwData.networkData[0].add[0] = 0x00;
  87   1          //     testSetNwData.networkData[0].add[1] = 0x04;
  88   1          //     P44 = 0;
  89   1          //     iCounter = 0;
  90   1          // }
  91   1          // else
  92   1          // {
  93   1          //     P44 = 1;
  94   1          //     iCounter ++;
  95   1          // }
  96   1          // unsigned char dummyAgingCnt = 0;
  97   1          // getNetworkData(testPar[0].add[1], testPar[0].add[0], &testPar[0].opData[0], &testPar[0].opData[1], 
             -&testPar[0].cmd, &dummyAgingCnt);
  98   1          // getNetworkData(testPar[1].add[1], testPar[1].add[0], &testPar[1].opData[0], &testPar[1].opData[1], 
             -testPar[1].cmd);
  99   1          // getNetworkData(testPar[2].add[1], testPar[2].add[0], &testPar[2].opData[0], &testPar[2].opData[1], 
             -testPar[2].cmd);
 100   1          // getNetworkData(testPar[3].add[1], testPar[3].add[0], &testPar[3].opData[0], &testPar[3].opData[1], 
             -testPar[3].cmd);
 101   1          // getNetworkData(testPar[4].add[1], testPar[4].add[0], &testPar[4].opData[0], &testPar[4].opData[1], 
             -testPar[4].cmd);
 102   1          // getNetworkData(testPar[5].add[1], testPar[5].add[0], &testPar[5].opData[0], &testPar[5].opData[1], 
             -testPar[5].cmd);
 103   1          // getNetworkData(testPar[6].add[1], testPar[6].add[0], &testPar[6].opData[0], &testPar[6].opData[1], 
             -testPar[6].cmd);
 104   1          // getNetworkData(testPar[7].add[1], testPar[7].add[0], &testPar[7].opData[0], &testPar[7].opData[1], 
             -testPar[7].cmd);
 105   1          // getNetworkData(testPar[8].add[1], testPar[8].add[0], &testPar[8].opData[0], &testPar[8].opData[1], 
C51 COMPILER V9.00   TASK                                                                  07/03/2019 08:06:54 PAGE 3   

             -testPar[8].cmd);
 106   1          // getNetworkData(testPar[9].add[1], testPar[9].add[0], &testPar[9].opData[0], &testPar[9].opData[1], 
             -testPar[9].cmd);
 107   1          // getNetworkData(testPar[10].add[1], testPar[10].add[0], &testPar[10].opData[0], &testPar[10].opData[
             -1], testPar[10].cmd);
 108   1          // getNetworkData(testPar[11].add[1], testPar[11].add[0], &testPar[11].opData[0], &testPar[11].opData[
             -1], testPar[11].cmd);
 109   1          // getNetworkData(testPar[12].add[1], testPar[12].add[0], &testPar[12].opData[0], &testPar[12].opData[
             -1], testPar[12].cmd);
 110   1          // getNetworkData(testPar[13].add[1], testPar[13].add[0], &testPar[13].opData[0], &testPar[13].opData[
             -1], testPar[13].cmd);
 111   1          // getNetworkData(testPar[14].add[1], testPar[14].add[0], &testPar[14].opData[0], &testPar[14].opData[
             -1], testPar[14].cmd);
 112   1          // getNetworkData(testPar[15].add[1], testPar[15].add[0], &testPar[15].opData[0], &testPar[15].opData[
             -1], testPar[15].cmd);
 113   1          // getNetworkData(testPar[16].add[1], testPar[16].add[0], &testPar[16].opData[0], &testPar[16].opData[
             -1], testPar[16].cmd);
 114   1          // getNetworkData(testPar[17].add[1], testPar[17].add[0], &testPar[17].opData[0], &testPar[17].opData[
             -1], testPar[17].cmd);
 115   1          // getNetworkData(testPar[18].add[1], testPar[18].add[0], &testPar[18].opData[0], &testPar[18].opData[
             -1], testPar[18].cmd);
 116   1          // getNetworkData(testPar[19].add[1], testPar[19].add[0], &testPar[19].opData[0], &testPar[19].opData[
             -1], testPar[19].cmd);
 117   1      
 118   1      
 119   1          // setNetworkData(0x00, 0x20, &dummyDatL, &dummyDatH, &dummyCmd, &dummyCnt);
 120   1          // getNetworkData(0x0D, 0x30, &dummyDatL, &dummyDatH, &dummyCmd, &dummyCnt);
 121   1      
 122   1          // setNetworkData(&testSetNwData);
 123   1          if(taskCnt == 0)
 124   1          {
 125   2              longFrameHandler();
 126   2              
 127   2              taskCnt ++;
 128   2          }
 129   1          else if(taskCnt == 2)
 130   1          {
 131   2              
 132   2              // AppFunRun();
 133   2              taskCnt ++;
 134   2          }
 135   1          else if(taskCnt == 3)
 136   1          {
 137   2              P44 = 1;
 138   2              network50msUpdate();
 139   2              P44 = 0;
 140   2              taskCnt = 0;
 141   2          }
 142   1          else
 143   1          {
 144   2              taskCnt ++;
 145   2          }
 146   1      }
*** WARNING C280 IN LINE 63 OF ..\SRC\MAIN\TASK.C: 'dummyCnt': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    116    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    200       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.00   TASK                                                                  07/03/2019 08:06:54 PAGE 4   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
