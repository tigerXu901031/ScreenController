C51 COMPILER V9.00   19296P1                                                               07/11/2019 00:50:50 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE 19296P1
OBJECT MODULE PLACED IN ..\bin\19296p1.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE ..\src\drv\19296p1.C LARGE BROWSE DEBUG OBJECTEXTEND PRINT(..\lst\19296p1.l
                    -st) OBJECT(..\bin\19296p1.obj)

line level    source

   1          /* Һ��ģ���ͺţ�JLX19296-380
   2          ���нӿ�
   3          ����IC ��:ST75256
   4          �ıࣺBruce Dong
   5          2019.5.15
   6          */
   7          #include "../drv/STC8.H"
   8          #include "../drv/19296p1.H"
   9          //#include "../app/HMI.H"
  10          
  11          //Development Board Connection
  12          //sbit LCD19296_CS1 = P3^7; 
  13          //sbit LCD19296_RST = P3^6; 
  14          //sbit LCD19296_RS = P3^5; 
  15          //sbit LCD19296_RD = P3^4; 
  16          //sbit LCD19296_WR = P0^7; 
  17          
  18          //V1 temporary connection
  19          sbit LCD19296_IF0       = P4^1;
  20          sbit LCD19296_CS1 = P3^7; 
  21          sbit LCD19296_RST = P2^0; 
  22          sbit LCD19296_RS = P3^6; 
  23          sbit LCD19296_RD = P5^1; 
  24          sbit LCD19296_WR = P5^0; 
  25          
  26          //V2 connection
  27          //sbit LCD19296_CS1 = P4^1; 
  28          //sbit LCD19296_RST = P5^0; 
  29          //sbit LCD19296_RS = P3^7; 
  30          //sbit LCD19296_RD = P3^6; 
  31          //sbit LCD19296_WR = P5^1; 
  32          //����P2.0~2.7 ��ӦDB0~DB7*/
  33          //sbit key=P2^0; /*�����ӿڣ�P2.0 ����GND ֮���һ������*/
  34          
  35          //extern uchar code Char1608_Up[], Char1608_Down[], Char1608_Left[], Char1608_Right[];
  36          //extern uchar code Hanzi1616_Up[], Hanzi1616_Down[], Hanzi1616_Left[], Hanzi1616_Right[];
  37          //
  38          //extern uchar code Hanzi_2424_XST_Dian[], Hanzi_2424_XST_Ji[],Hanzi_2424_XST_Fang[], Hanzi_2424_XST_Xiang
             -[];
  39          
  40          /*��ʱ��1 �����i ��*/
  41          void delay(int i)
  42          {
  43   1              int j,k;
  44   1              for(j=0;j<i;j++)
  45   1              for(k=0;k<110;k++);
  46   1      }
  47          /*��ʱ��1us ��i ��*/
  48          void delay_us(int i)
  49          {
  50   1              int j,k;
  51   1              for(j=0;j<i;j++)
  52   1              for(k=0;k<1;k++);
  53   1      }
C51 COMPILER V9.00   19296P1                                                               07/11/2019 00:50:50 PAGE 2   

  54          
  55          //temporary send data function
  56          void LCD_Send_PData(uchar data2send)
  57          {
  58   1      //      uchar temp1;
  59   1      //      temp1 = data2send<<1;
  60   1      //      P2 = temp1;
  61   1              if((data2send&0x80)==0)
  62   1                      {P35 = 0;}              //D7
  63   1                      else
  64   1                              {P35 = 1;}
  65   1              if((data2send&0x40)==0)
  66   1                      {P27 = 0;}
  67   1                      else
  68   1                              {P27 = 1;}
  69   1              if((data2send&0x20)==0)
  70   1                      {P26 = 0;}
  71   1                      else
  72   1                              {P26 = 1;}
  73   1              if((data2send&0x10)==0)
  74   1                      {P25 = 0;}
  75   1                      else
  76   1                              {P25 = 1;}
  77   1              if((data2send&0x08)==0)
  78   1                      {P24 = 0;}
  79   1                      else
  80   1                              {P24 = 1;}
  81   1              if((data2send&0x04)==0)
  82   1                      {P23 = 0;}
  83   1                      else
  84   1                              {P23 = 1;}
  85   1              if((data2send&0x02)==0)
  86   1                      {P22 = 0;}
  87   1                      else
  88   1                              {P22 = 1;}
  89   1              if((data2send&0x01)==0)
  90   1                      {P21 = 0;}
  91   1                      else
  92   1                              {P21 = 1;}
  93   1      }
  94          
  95          
  96          
  97          
  98          //=============transfer command to LCM===============
  99          void SEND_CMD_LCD(uchar data1)
 100          {
 101   1              LCD19296_CS1=0;
 102   1              LCD19296_RS=0;
 103   1              
 104   1              LCD19296_RD=0;
 105   1              delay_us(1);
 106   1              LCD19296_WR=0;
 107   1      //      P2=data1;
 108   1              LCD_Send_PData(data1);
 109   1              LCD19296_RD=1;
 110   1              delay_us(1);
 111   1              LCD19296_CS1=1;
 112   1              LCD19296_RD=0;
 113   1      }
 114          
 115          //-----------transfer data to LCM---------------
C51 COMPILER V9.00   19296P1                                                               07/11/2019 00:50:50 PAGE 3   

 116          void SEND_DATA_LCD(uchar data1)
 117          {
 118   1              LCD19296_CS1=0;
 119   1              LCD19296_RS=1;
 120   1              LCD19296_RD=0;
 121   1              delay_us(1);
 122   1              LCD19296_WR=0;
 123   1      //      P2=data1;
 124   1              LCD_Send_PData(data1);
 125   1              LCD19296_RD=1;
 126   1              delay_us(1);
 127   1              LCD19296_CS1=1;
 128   1              LCD19296_RD=0;
 129   1      }
 130          
 131          void INIT_LCD()
 132          {
 133   1              LCD19296_IF0 = 0;
 134   1              LCD19296_RST=0;
 135   1              delay(100);
 136   1              LCD19296_RST=1;
 137   1              delay(100);
 138   1              SEND_CMD_LCD(0x30); //EXT=0
 139   1              SEND_CMD_LCD(0x94); //Sleep out
 140   1              SEND_CMD_LCD(0x31); //EXT=1
 141   1              SEND_CMD_LCD(0xD7); //Autoread disable
 142   1              SEND_DATA_LCD(0X9F); //
 143   1              SEND_CMD_LCD(0x32); //Analog SET
 144   1              SEND_DATA_LCD(0x00); //OSC Frequency adjustment
 145   1              SEND_DATA_LCD(0x01); //Frequency on booster capacitors->6KHz
 146   1              SEND_DATA_LCD(0x03); //Bias=1/11
 147   1              SEND_CMD_LCD(0x20); // Gray Level
 148   1              SEND_DATA_LCD(0x01);
 149   1              
 150   1              SEND_DATA_LCD(0x03);
 151   1              SEND_DATA_LCD(0x05);
 152   1              SEND_DATA_LCD(0x07);
 153   1              SEND_DATA_LCD(0x09);
 154   1              SEND_DATA_LCD(0x0b);
 155   1              SEND_DATA_LCD(0x0d);
 156   1              SEND_DATA_LCD(0x10);
 157   1              SEND_DATA_LCD(0x11);
 158   1              SEND_DATA_LCD(0x13);
 159   1              SEND_DATA_LCD(0x15);
 160   1              SEND_DATA_LCD(0x17);
 161   1              SEND_DATA_LCD(0x19);
 162   1              SEND_DATA_LCD(0x1b);
 163   1              SEND_DATA_LCD(0x1d);
 164   1              SEND_DATA_LCD(0x1f);
 165   1              SEND_CMD_LCD(0x30); //EXT=0
 166   1              SEND_CMD_LCD(0x75); //Page Address setting
 167   1              
 168   1              SEND_DATA_LCD(0X00); // XS=0
 169   1              SEND_DATA_LCD(0X14); // XE=159 0x28
 170   1              SEND_CMD_LCD(0x15); //Clumn Address setting
 171   1              SEND_DATA_LCD(0X00); // XS=0
 172   1              SEND_DATA_LCD(0Xff); // XE=256
 173   1              SEND_CMD_LCD(0xBC); //Data scan direction
 174   1              SEND_DATA_LCD(0x00); //MX.MY=Normal
 175   1              SEND_DATA_LCD(0xA6);
 176   1              SEND_CMD_LCD(0xCA); //Display Control
 177   1              SEND_DATA_LCD(0X00); //
C51 COMPILER V9.00   19296P1                                                               07/11/2019 00:50:50 PAGE 4   

 178   1              SEND_DATA_LCD(0X9F); //Duty=160
 179   1              SEND_DATA_LCD(0X20); //Nline=off
 180   1              SEND_CMD_LCD(0xF0); //Display Mode
 181   1              SEND_DATA_LCD(0X10); //10=Monochrome Mode,11=4Gray
 182   1              
 183   1              SEND_CMD_LCD(0x81); //EV control
 184   1      //      SEND_DATA_LCD(0x3a); //VPR[5-0]
 185   1              SEND_DATA_LCD(0x30); //VPR[5-0]
 186   1              SEND_DATA_LCD(0x03); //�ֵ��Աȶ�
 187   1              SEND_CMD_LCD(0x20); //Power control
 188   1              SEND_DATA_LCD(0x0B); //D0=regulator ; D1=follower ; D3=booste, on:1 off:0
 189   1              delay_us(100);
 190   1              SEND_CMD_LCD(0xAF); //Display on
 191   1      }
 192          
 193          /*дLCD ���е�ַ��X Ϊ��ʼ���е�ַ��Y Ϊ��ʼ���е�ַ��x_total,
             -y_total �ֱ�Ϊ�е�ַ���е�ַ����㵽�յ�Ĳ�ֵ */
 194          void lcd_address(uchar x,uchar y,x_total,y_total)
 195          {
 196   1              x=x-1;
 197   1              y=y+7;
 198   1              SEND_CMD_LCD(0x15); //Set Column Address
 199   1              SEND_DATA_LCD(x);
 200   1              SEND_DATA_LCD(x+x_total-1);
 201   1              SEND_CMD_LCD(0x75); //Set Page Address
 202   1              SEND_DATA_LCD(y);
 203   1              SEND_DATA_LCD(y+y_total-1);
 204   1              SEND_CMD_LCD(0x30);
 205   1              SEND_CMD_LCD(0x5c);
 206   1      }
 207          
 208          /* void lcd_address1(uchar x,uchar y,x_total,y_total)
 209          {
 210                  x=x-1;
 211                  y=y+7;
 212                  SEND_CMD_LCD(0x15); //Set Column Address
 213                  SEND_DATA_LCD(x);
 214                  SEND_DATA_LCD(x+x_total-1);
 215                  SEND_CMD_LCD(0x75); //Set Page Address
 216                  SEND_DATA_LCD(y);
 217                  SEND_DATA_LCD(y+y_total-1);
 218                  SEND_CMD_LCD(0x30);
 219                  SEND_CMD_LCD(0x5c);
 220          } */
 221          
 222          /*дLCD ���е�ַ��X Ϊ��ʼ���е�ַ��Y Ϊ��ʼ���е�ַ��x_total,
             -y_total �ֱ�Ϊ�е�ַ���е�ַ����㵽�յ�Ĳ�ֵ */
 223          void SET_LCD_DISP_AREA(uchar Column, uchar Page, Column_Total,Page_Total)
 224          {
 225   1              Column = Column - 1;
 226   1              Page = Page + 7;
 227   1              SEND_CMD_LCD(0x15); //Set Column Address
 228   1              SEND_DATA_LCD(Column);
 229   1              Column += Column_Total;
 230   1              Column -= 1;
 231   1              SEND_DATA_LCD(Column);
 232   1              SEND_CMD_LCD(0x75); //Set Page Address
 233   1              SEND_DATA_LCD(Page);
 234   1              Page += Page_Total;
 235   1              Page -= 1;
 236   1              SEND_DATA_LCD(Page);
 237   1              SEND_CMD_LCD(0x30);
C51 COMPILER V9.00   19296P1                                                               07/11/2019 00:50:50 PAGE 5   

 238   1              SEND_CMD_LCD(0x5c);
 239   1      }
 240          
 241          /*����*/
 242          void clear_screen(void)
 243          {
 244   1              uchar i,j;
 245   1              lcd_address(0,0,193,13);
 246   1              for(i=0;i<13;i++)
 247   1              {
 248   2                      for(j=0;j<193;j++)
 249   2                      {
 250   3                              SEND_DATA_LCD(0x00);
 251   3                      }
 252   2              }
 253   1      }
 254          
 255          void display_8x8(uchar column, uchar page,uchar *text) 
 256          { 
 257   1        uchar i; 
 258   1        lcd_address(column,page,8,1); 
 259   1          for(i=0;i<8;i++) 
 260   1          {
 261   2              SEND_DATA_LCD(*text);
 262   2              text++; 
 263   2          } 
 264   1      }
 265          
 266          void display_8x1(uchar column, uchar page,uchar text) 
 267          { 
 268   1        lcd_address(column,page,1,1); 
 269   1        SEND_DATA_LCD(text);
 270   1      }
 271          
 272          //void display_16x8(uchar column, uchar page,uchar *text) 
 273          //{ 
 274          //  uchar i; 
 275          //  lcd_address(column,page,8,2); 
 276          //    for(i=0;i<16;i++) 
 277          //    {
 278          //      SEND_DATA_LCD(*text);
 279          //      text++; 
 280          //    } 
 281          //}
 282          
 283          void CHAR_Display_16x8(uchar Column, uchar Page,uchar *dp, uchar Disp_Para) 
 284          { 
 285   1        uchar i, Char1608[16], *p1, *p2;
 286   1              SET_LCD_DISP_AREA(Column, Page, 8, 2); 
 287   1              
 288   1              p1 = Char1608;
 289   1              for(i=0;i<16;i++)
 290   1                      {*(p1+i) = *(dp+i);}
 291   1              
 292   1      //�ж��Ϻ�
 293   1              if((Disp_Para & Disp_UP)>0)
 294   1                      {
 295   2                                      p2 = Char1608_Up;
 296   2                                      for(i=0;i<16;i++)
 297   2                                      {*(p1+i)|=*(p2+i);}
 298   2                      }
 299   1                      else
C51 COMPILER V9.00   19296P1                                                               07/11/2019 00:50:50 PAGE 6   

 300   1                              {;}
 301   1      
 302   1      //�ж��º�
 303   1              if((Disp_Para & Disp_Down)>0)
 304   1                      {
 305   2                                      p2 = Char1608_Down;
 306   2                                      for(i=0;i<16;i++)
 307   2                                      {*(p1+i)|=*(p2+i);}
 308   2                      }
 309   1                      else
 310   1                              {;}
 311   1      
 312   1      //�ж�����
 313   1              if((Disp_Para & Disp_Left)>0)
 314   1                      {
 315   2                                      p2 = Char1608_Left;
 316   2                                      for(i=0;i<16;i++)
 317   2                                      {*(p1+i)|=*(p2+i);}
 318   2                      }
 319   1                      else
 320   1                              {;}
 321   1      
 322   1      //�ж�����
 323   1              if((Disp_Para & Disp_Right)>0)
 324   1                      {
 325   2                                      p2 = Char1608_Right;
 326   2                                      for(i=0;i<16;i++)
 327   2                                      {*(p1+i)|=*(p2+i);}
 328   2                      }
 329   1                      else
 330   1                              {;}
 331   1      
 332   1          for(i=0;i<16;i++) 
 333   1          {
 334   2              SEND_DATA_LCD(*(p1+i));
 335   2          } 
 336   1      }
 337          
 338          ///*��ʾ16*16 ����ĺ��ֻ��ͬ��16*16 �����ͼ��*/
 339          //void disp_16x16(uchar x,uchar y,uchar *dp)
 340          //{
 341          //      uchar i,j;
 342          //      lcd_address(x,y,16,2);
 343          //      for(i=0;i<2;i++)
 344          //      {
 345          //              for(j=0;j<16;j++)
 346          //              {
 347          //                      SEND_DATA_LCD(*dp);
 348          //                      dp++;
 349          //              }
 350          //      }
 351          //}
 352          
 353          /*��ʾ16*16 ����ĺ���*/
 354          /*�β�˵����bit0���Ϻ��ߣ�bit1���º��ߣ�bit2�������ߣ�
             -bit3�������ߣ�bit4����꣬bit5������*/
 355          /*      bit  7 6 5 4 3 2 1 0    */
 356          /*      Para x x x x x x x x    */
 357          
 358          void Hanzi_Disp_16x16(uchar Column, uchar Page, uchar *dp, uchar Disp_Para)
 359          {
 360   1              uchar i, Hanzi1616[32], *p1, *p2;
C51 COMPILER V9.00   19296P1                                                               07/11/2019 00:50:50 PAGE 7   

 361   1              SET_LCD_DISP_AREA(Column, Page, 16, 2);
 362   1      
 363   1              p1 = Hanzi1616;
 364   1              for(i=0;i<32;i++)
 365   1                      {*(p1+i) = *(dp+i);}
 366   1              
 367   1      //�ж��Ϻ�
 368   1              if((Disp_Para & Disp_UP)>0)
 369   1                      {
 370   2                                      p2 = Hanzi1616_Up;
 371   2                                      for(i=0;i<32;i++)
 372   2                                      {*(p1+i)|=*(p2+i);}
 373   2                      }
 374   1                      else
 375   1                              {;}
 376   1      
 377   1      //�ж��º�
 378   1              if((Disp_Para & Disp_Down)>0)
 379   1                      {
 380   2                                      p2 = Hanzi1616_Down;
 381   2                                      for(i=0;i<32;i++)
 382   2                                      {*(p1+i)|=*(p2+i);}
 383   2                      }
 384   1                      else
 385   1                              {;}
 386   1      
 387   1      //�ж�����
 388   1              if((Disp_Para & Disp_Left)>0)
 389   1                      {
 390   2                                      p2 = Hanzi1616_Left;
 391   2                                      for(i=0;i<32;i++)
 392   2                                      {*(p1+i)|=*(p2+i);}
 393   2                      }
 394   1                      else
 395   1                              {;}
 396   1      
 397   1      //�ж�����
 398   1              if((Disp_Para & Disp_Right)>0)
 399   1                      {
 400   2                                      p2 = Hanzi1616_Right;
 401   2                                      for(i=0;i<32;i++)
 402   2                                      {*(p1+i)|=*(p2+i);}
 403   2                      }
 404   1                      else
 405   1                              {;}
 406   1      
 407   1      //������ʾ
 408   1              for(i=0;i<32;i++)
 409   1              {
 410   2                      SEND_DATA_LCD(*(p1+i));
 411   2              }
 412   1      }
 413          
 414          /*��ʾ24*24 ����ĺ��ֻ��ͬ��24*24 �����ͼ��*/
 415          void disp_24x24(int x,int y,uchar *dp)
 416          {
 417   1              uchar i;
 418   1              lcd_address(x,y,24,3);
 419   1              for(i=0;i<72;i++)
 420   1              {
 421   2                      SEND_DATA_LCD(*(dp+i));
 422   2              }
C51 COMPILER V9.00   19296P1                                                               07/11/2019 00:50:50 PAGE 8   

 423   1      }
 424          
 425          void disp_24x12(int x,int y,uchar *dp)
 426          {
 427   1              uchar i;
 428   1              lcd_address(x,y,12,3);
 429   1              for(i=0;i<36;i++)
 430   1              {
 431   2                      SEND_DATA_LCD(*(dp+i));
 432   2              }
 433   1      }
 434          
 435          /////*��ʾ32*32 ����ĺ��ֻ��ͬ��32*32 �����ͼ��*/
 436          ////void disp_32x32(int x,int y,uchar *dp)
 437          ////{
 438          ////    uchar i,j;
 439          ////    lcd_address(x,y,32,4);
 440          ////    for(i=0;i<4;i++)
 441          ////    {
 442          ////            for(j=0;j<32;j++)
 443          ////            {
 444          ////                    SEND_DATA_LCD(*dp);
 445          ////                    dp++;
 446          ////            }
 447          ////    }
 448          ////}
 449          ////
 450          /////*��ʾ48*48 ����ĺ��ֻ�ͼ��*/
 451          ////void disp_48x48(uchar x,uchar y,char *dp)
 452          ////{
 453          ////    uchar i,j;
 454          ////    lcd_address(x,y,48,6);
 455          ////    for(i=0;i<6;i++)
 456          ////    {
 457          ////            for(j=0;j<48;j++)
 458          ////            {
 459          ////                    SEND_DATA_LCD(*dp);
 460          ////                    dp++;
 461          ////            }
 462          ////    }
 463          ////}
 464          ////
 465          /////*��ʾ64*48 ����ĺ��ֻ�ͼ��*/
 466          ////void disp_64x48(uchar x,uchar y,char *dp)
 467          ////{
 468          ////    uchar i,j;
 469          ////    lcd_address(x,y,55,6);
 470          ////    for(i=0;i<6;i++)
 471          ////    {
 472          ////            for(j=0;j<55;j++)
 473          ////            {
 474          ////                    SEND_DATA_LCD(*dp);
 475          ////                    dp++;
 476          ////            }
 477          ////    }
 478          ////}
 479          ////
 480          /////*��ʾ96*24 �����ͼ��*/
 481          ////void disp_96x24(uchar x,uchar y,char *dp)
 482          ////{
 483          ////    uchar i,j; 
 484          ////    lcd_address(x,y,96,3);
C51 COMPILER V9.00   19296P1                                                               07/11/2019 00:50:50 PAGE 9   

 485          ////    for(i=0;i<3;i++)
 486          ////    {
 487          ////            for(j=0;j<96;j++)
 488          ////            {
 489          ////                    SEND_DATA_LCD(*dp);
 490          ////                    dp++;
 491          ////            }
 492          ////    }
 493          ////}
 494          ////
 495          /////*��ʾ196*96 �����ͼ��*/
 496          ////void disp_192x96(uchar x,uchar y,char *dp)
 497          ////{
 498          ////    uchar i,j; 
 499          ////    lcd_address(x,y,192,12);
 500          ////    for(i=0;i<12;i++)
 501          ////    {
 502          ////            for(j=0;j<192;j++)
 503          ////            {
 504          ////                    SEND_DATA_LCD(*dp);
 505          ////                    dp++;
 506          ////            }
 507          ////    }
 508          ////}
 509          
 510          //������ţ�ȡ��ģ��ʽ�����룬����ʽ��˳��
 511          
 512          uchar code Char0808_Up[]={0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80};/*"�Ϻ�"*/
 513          
 514          uchar code Char0808_Down[]={0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01};/*"�º�"*/
 515          
 516          uchar code Char0808_Left[]={0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00};/*"����"*/
 517          
 518          uchar code Char0808_Right[]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF};/*"����"*/
 519          
 520          uchar code Char0808_UpDown[]={0x81,0x81,0x81,0x81,0x81,0x81,0x81,0x81};/*"�Ϻ�+�º�"*/
 521          
 522          uchar code Char1608_Up[]={
 523          0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};/*"�Ϻ�"*/
 524          
 525          uchar code Char1608_Down[]={
 526          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01};/*"�º�"*/
 527          
 528          uchar code Char1608_Left[]={
 529          0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00};/*"����"*/
 530          
 531          uchar code Char1608_Right[]={
 532          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF};/*"����"*/
 533          
 534          uchar code Hanzi1616_Up[]={
 535          0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
 536          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};/*"�Ϻ�"*/
 537          
 538          uchar code Hanzi1616_Down[]={
 539          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 540          0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01};/*"�º�"*/
 541          
 542          uchar code Hanzi1616_Left[]={
 543          0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 544          0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};/*"����"*/
 545          
 546          uchar code Hanzi1616_Right[]={
C51 COMPILER V9.00   19296P1                                                               07/11/2019 00:50:50 PAGE 10  

 547          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
 548          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF};/*"����"*/
 549          
 550          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2005    ----
   CONSTANT SIZE    =    232    ----
   XDATA SIZE       =   ----     101
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
