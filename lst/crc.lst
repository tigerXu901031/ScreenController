C51 COMPILER V9.00   CRC                                                                   07/11/2019 00:50:50 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE CRC
OBJECT MODULE PLACED IN ..\bin\crc.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE ..\src\srv\crc.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(..\lst\crc.lst) OBJE
                    -CT(..\bin\crc.obj)

line level    source

   1          #include "crc.h" 
   2          
   3          const uint16_t polynom = 0xA001;
   4           
   5          
   6          uint16_t Crc16RtuCal(uint8_t *pDataValue,uint16_t uiDataLen)
   7          {
   8   1              int i;
   9   1              uint16_t uiCrcValue = 0xffff;
  10   1              while(uiDataLen--)
  11   1              {
  12   2                      uiCrcValue^=*pDataValue++;
  13   2                      for(i=0;i<8;i++)
  14   2                      {
  15   3                              if(uiCrcValue&0x0001)
  16   3                              {
  17   4                              uiCrcValue = (uiCrcValue>>1)^0xa001;
  18   4                              }
  19   3                              else
  20   3                              {
  21   4                              uiCrcValue >>=1;
  22   4                              }
  23   3                      }
  24   2       }
  25   1       return(uiCrcValue);
  26   1      }
  27          
  28          uint16_t crc16bitbybit(uint8_t *ptr, uint16_t len)
  29          {
  30   1              uint8_t i;
  31   1              uint16_t crc = 0xffff;
  32   1       
  33   1              if (len == 0) {
  34   2                      len = 1;
  35   2              }
  36   1              while (len--) {
  37   2                      crc ^= *ptr;
  38   2                      for (i = 0; i<8; i++)
  39   2                      {
  40   3                              if (crc & 1) {
  41   4                                      crc >>= 1;
  42   4                                      crc ^= polynom;
  43   4                              }
  44   3                              else {
  45   4                                      crc >>= 1;
  46   4                              }
  47   3                      }
  48   2                      ptr++;
  49   2              }
  50   1              return(crc);
  51   1      }
  52           
  53          /* Table of CRC values for high–order byte */
  54          const uint8_t crctablehi[] = {
C51 COMPILER V9.00   CRC                                                                   07/11/2019 00:50:50 PAGE 2   

  55                  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
  56                  0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
  57                  0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
  58                  0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  59                  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
  60                  0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
  61                  0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
  62                  0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
  63                  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
  64                  0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
  65                  0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
  66                  0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  67                  0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
  68                  0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
  69                  0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
  70                  0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  71                  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
  72                  0x40
  73          };
  74          /* Table of CRC values for low–order byte */
  75          const uint8_t crctablelo[] = {
  76                  0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
  77                  0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
  78                  0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
  79                  0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
  80                  0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
  81                  0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
  82                  0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
  83                  0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
  84                  0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
  85                  0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
  86                  0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
  87                  0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
  88                  0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
  89                  0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
  90                  0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
  91                  0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
  92                  0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
  93                  0x40
  94          };
  95           
  96          uint16_t crc16table(uint8_t *ptr, uint16_t len)
  97          {
  98   1              uint8_t crchi = 0xff;
  99   1              uint8_t crclo = 0xff; 
 100   1              uint16_t index;
 101   1              while (len--) 
 102   1              {
 103   2                      index = crclo ^ *ptr++; 
 104   2                      crclo = crchi ^ crctablehi[index];
 105   2                      crchi = crctablelo[index];
 106   2              }
 107   1              return (crchi << 8 | crclo);
 108   1      }
 109           
 110          const uint16_t crctalbeabs[] = { 
 111                  0x0000, 0xCC01, 0xD801, 0x1400, 0xF001, 0x3C00, 0x2800, 0xE401, 
 112                  0xA001, 0x6C00, 0x7800, 0xB401, 0x5000, 0x9C01, 0x8801, 0x4400 
 113          };
 114           
 115          uint16_t crc16tablefast(uint8_t *ptr, uint16_t len)
 116          {
C51 COMPILER V9.00   CRC                                                                   07/11/2019 00:50:50 PAGE 3   

 117   1              uint16_t crc = 0xffff; 
 118   1              uint16_t i;
 119   1              uint8_t ch;
 120   1       
 121   1              for (i = 0; i < len; i++) {
 122   2                      ch = *ptr++;
 123   2                      crc = crctalbeabs[(ch ^ crc) & 15] ^ (crc >> 4);
 124   2                      crc = crctalbeabs[((ch >> 4) ^ crc) & 15] ^ (crc >> 4);
 125   2              } 
 126   1              
 127   1              return crc;
 128   1      }
 129          
 130          /* test function */
 131          // uint8_t dataArr[8] = {0xFF, 0x03, 0x30, 0x00, 0x00, 0x09, 0x00, 0x00};
 132          // uint8_t dataArr[23] = {0xFF, 0x03, 0x12, 0x01, 0x02, 0x03, 0x04, 0x05,
 133          //                                         0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13,
 134          //                                         0x14, 0x15, 0x16, 0x17, 0x18, 0xA9, 0xE9};
 135          // // // FF 03 12 00 00 00 00 00 00 0C 0E 00 00 00 00 00 00 00 01 00 00 8C 6B
 136          // int main()
 137          // {
 138          //      uint16_t crcVal = 0;
 139          //      crcVal = Crc16RtuCal(&dataArr[0], 21);
 140          //      return 1;
 141          // }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    626    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    546      28
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
