C51 COMPILER V9.00   FIFO                                                                  07/06/2019 19:22:54 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE FIFO
OBJECT MODULE PLACED IN ..\bin\fifo.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE ..\src\srv\fifo.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(..\lst\fifo.lst) OB
                    -JECT(..\bin\fifo.obj)

line level    source

   1          /* 
   2             -----------------------------------------------------------------------
   3             Author   - Tiger.Xu
   4             Date     - 2019.06.08
   5             Version  - 0.0.1
   6          
   7             Change Notes:
   8                  2019.06.08      Tiger.Xu
   9                  Initial version
  10          
  11                  ...             ...
  12                  ...
  13              
  14             Description:
  15                  Generic FIFO(First In First Out) library
  16             -----------------------------------------------------------------------
  17          */
  18          #include "fifo.h"
  19          
  20          void clearDataBlock(unsigned char *startAdd, unsigned char length)
  21          {
  22   1          unsigned int i = 0;
  23   1          for(i = 0; i < length; i ++)
  24   1          {
  25   2              *startAdd = 0x00;
  26   2              startAdd ++;
  27   2          }
  28   1      }
  29          
  30          void memcpyCus(unsigned char *destAdd,unsigned char *sourceAdd, unsigned char length)
  31          {
  32   1          unsigned char i = 0;
  33   1          for(i = 0; i < length; i ++)
  34   1          {
  35   2              *destAdd = *sourceAdd;
  36   2              destAdd ++;
  37   2              sourceAdd ++;
  38   2          }
  39   1      }
  40          
  41          fifo_type fifoInit(unsigned char unitLen)
  42          {
  43   1          fifo_type fifoObj;
  44   1          fifoObj.unitLen = unitLen;
  45   1      
  46   1          /* set the initial current data pointer at 0 */
  47   1          fifoObj.curPtr = 0;
  48   1      
  49   1          /* clear all the data area */
  50   1          clearDataBlock(&fifoObj.fifoData[0], FIFO_MAX_LENGTH);
  51   1      
  52   1          return fifoObj;
  53   1      }
  54          
C51 COMPILER V9.00   FIFO                                                                  07/06/2019 19:22:54 PAGE 2   

  55          fifoSts_type getFifoData(fifo_type *fifoObj, void *newData)
  56          {
  57   1          fifoSts_type returnVal = readFail;
  58   1          
  59   1          unsigned char* newDataAdd = (unsigned char*)newData;
  60   1          
  61   1          /* If the current data pointer is higher than 0
  62   1             it means there has valid data to output */
  63   1          if(fifoObj->curPtr > 0)
  64   1          {
  65   2              /* Output the first item in FIFO */
  66   2              memcpyCus(newDataAdd, &fifoObj->fifoData[0], fifoObj->unitLen);
  67   2              
  68   2              /* Clear the first item content */
  69   2              clearDataBlock(&fifoObj->fifoData[0], fifoObj->unitLen);
  70   2      
  71   2              /* Move all the existing items to the one position forward */
  72   2              memcpyCus(&fifoObj->fifoData[0], &fifoObj->fifoData[1],fifoObj->curPtr - 1);
  73   2      
  74   2              /* Move the current pointer of the FIFO */
  75   2              fifoObj->curPtr --;
  76   2      
  77   2              /* Clear the last valid item content */
  78   2              clearDataBlock(&fifoObj->fifoData[fifoObj->curPtr], fifoObj->unitLen);
  79   2      
  80   2              returnVal = readSuccess;
  81   2          }
  82   1          /* If the FIFO is empty then return all zero and
  83   1          with the readFail state */
  84   1          else{
  85   2              clearDataBlock(newDataAdd, fifoObj->unitLen);
  86   2              returnVal = readFail;
  87   2          }
  88   1          return returnVal;
  89   1      }
  90          
  91          fifoSts_type setFifoData(fifo_type *fifoObj, void *newData)
  92          {
  93   1          fifoSts_type returnVal = writeFail;
  94   1      
  95   1          unsigned char* newDataAdd = (unsigned char*)newData;
  96   1          unsigned char* destAdd = &fifoObj->fifoData[fifoObj->curPtr];
  97   1      
  98   1          /* Check whether the FIFO has the spare space to write 
  99   1             into the new data */
 100   1          if((FIFO_MAX_LENGTH - (fifoObj->unitLen * fifoObj->curPtr)) >= fifoObj->unitLen)
 101   1          {
 102   2              memcpyCus(destAdd, newDataAdd, fifoObj->unitLen);
 103   2              fifoObj->curPtr ++;
 104   2              returnVal = writeSuccess;
 105   2          }
 106   1          /* The FIFO is full no space to write then return fail */
 107   1          else
 108   1          {
 109   2              returnVal = readFail;
 110   2          }
 111   1          return returnVal;
 112   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    557    ----
C51 COMPILER V9.00   FIFO                                                                  07/06/2019 19:22:54 PAGE 3   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     131
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
